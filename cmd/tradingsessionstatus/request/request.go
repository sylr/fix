package tradingsessionstatus
import (
	"fmt"
	"time"

	"github.com/rs/zerolog"
	"github.com/spf13/cobra"

	"github.com/quickfixgo/enum"
	"github.com/quickfixgo/field"
	"github.com/quickfixgo/quickfix"
	"github.com/quickfixgo/tag"

	"sylr.dev/fix/config"
	"sylr.dev/fix/pkg/errors"
	"sylr.dev/fix/pkg/initiator"
	"sylr.dev/fix/pkg/initiator/application"
	"sylr.dev/fix/pkg/utils"
	// tradingsessionstatusrequest "github.com/sylr/quickfixgo-fix50sp2/tradingsessionstatusrequest"
	"github.com/quickfixgo/fix50sp2/tradingsessionstatusrequest"

)

// var (
// 	optionOrderSide, optionOrderType string
// 	optionOrderSymbol, optionOrderID string
// 	optionOrderExpiry                string
// 	optionOrderQuantity              int64
// 	optionOrderPrice                 float64
// 	optionOrderOrigination           string
// 	optionOrderAttributeType         []string
// 	optionOrderAttributeValue        []string
// 	optionPartyIDs                   []string
// 	optionPartyIDSources             []string
// 	optionPartySubIDs                []string
// 	optionPartySubIDTypes            []string
// 	optionPartyRoles                 []string
// 	optionPartyRoleQualifiers        []string
// )

var TradingSessionStatusRequestCmd = &cobra.Command{
	Use:               "request",
	Short:             "trading session status",
	Long:              "Send a Trading Session Status Request after initiating a session with a FIX acceptor.",
	Args:              cobra.ExactArgs(0),
	ValidArgsFunction: cobra.NoFileCompletions,
	PersistentPreRunE: func(cmd *cobra.Command, args []string) error {

		if cmd.HasParent() {
			parent := cmd.Parent()
			if parent.PersistentPreRunE != nil {
				return parent.PersistentPreRunE(cmd, args)
			}
		}
		return nil
	},
	RunE: Execute,
	// PersistentPreRunE: func(cmd *cobra.Command, args []string) error {
	// 	err := initiator.ValidateOptions(cmd, args)
	// 	if err != nil {
	// 		return err
	// 	}

	// 	if cmd.HasParent() {
	// 		parent := cmd.Parent()
	// 		if parent.PersistentPreRunE != nil {
	// 			err = parent.PersistentPreRunE(parent, args)
	// 			if err != nil {
	// 				return err
	// 			}
	// 		}
	// 	}

	// 	return nil
	// },
}

func init() {
	// NewOrderCmd.Flags().StringVar(&optionOrderSide, "side", "", "Order side (buy, sell ... etc)")
	// NewOrderCmd.Flags().StringVar(&optionOrderType, "type", "", "Order type (market, limit, stop ... etc)")
	// NewOrderCmd.Flags().StringVar(&optionOrderSymbol, "symbol", "", "Order symbol")
	// NewOrderCmd.Flags().Int64Var(&optionOrderQuantity, "quantity", 1, "Order quantity")
	// NewOrderCmd.Flags().StringVar(&optionOrderID, "id", "", "Order id (uuid autogenerated if not given)")
	// NewOrderCmd.Flags().StringVar(&optionOrderExpiry, "expiry", "day", "Order expiry (day, good_till_cancel ... etc)")
	// NewOrderCmd.Flags().Float64Var(&optionOrderPrice, "price", 0.0, "Order price")
	// NewOrderCmd.Flags().StringVar(&optionOrderOrigination, "origination", "", "Order origination")
	// NewOrderCmd.Flags().StringSliceVar(&optionOrderAttributeType, "attribute-type", []string{}, "Order attribute types")
	// NewOrderCmd.Flags().StringSliceVar(&optionOrderAttributeValue, "attribute-value", []string{}, "Order attribute value")

	// NewOrderCmd.Flags().StringSliceVar(&optionPartyIDs, "party-id", []string{}, "Order party ids")
	// NewOrderCmd.Flags().StringSliceVar(&optionPartyIDSources, "party-id-source", []string{}, "Order party id sources")
	// NewOrderCmd.Flags().StringSliceVar(&optionPartyRoles, "party-role", []string{}, "Order party roles")
	// NewOrderCmd.Flags().StringSliceVar(&optionPartyRoleQualifiers, "party-role-qualifier", []string{}, "Order party role qualifiers")
	// NewOrderCmd.Flags().StringSliceVar(&optionPartySubIDs, "party-sub-ids", []string{}, "Order party sub ids (space separated)")
	// NewOrderCmd.Flags().StringSliceVar(&optionPartySubIDTypes, "party-sub-id-types", []string{}, "Order party sub id types (space separated)")

	// NewOrderCmd.MarkFlagRequired("side")
	// NewOrderCmd.MarkFlagRequired("type")
	// NewOrderCmd.MarkFlagRequired("symbol")
	// NewOrderCmd.MarkFlagRequired("quantity")

	// NewOrderCmd.RegisterFlagCompletionFunc("side", complete.OrderSide)
	// NewOrderCmd.RegisterFlagCompletionFunc("type", complete.OrderType)
	// NewOrderCmd.RegisterFlagCompletionFunc("expiry", complete.OrderTimeInForce)
	// NewOrderCmd.RegisterFlagCompletionFunc("symbol", cobra.NoFileCompletions)
	// NewOrderCmd.RegisterFlagCompletionFunc("origination", complete.OrderOriginationRole)
	// NewOrderCmd.RegisterFlagCompletionFunc("attribute-type", complete.OrderAttributeType)
	// NewOrderCmd.RegisterFlagCompletionFunc("attribute-value", cobra.NoFileCompletions)
	// NewOrderCmd.RegisterFlagCompletionFunc("party-id", cobra.NoFileCompletions)
	// NewOrderCmd.RegisterFlagCompletionFunc("party-id-source", complete.OrderPartyIDSource)
	// NewOrderCmd.RegisterFlagCompletionFunc("party-sub-ids", cobra.NoFileCompletions)
	// NewOrderCmd.RegisterFlagCompletionFunc("party-sub-id-types", complete.OrderPartySubIDTypes)
	// NewOrderCmd.RegisterFlagCompletionFunc("party-role", complete.OrderPartyIDRole)
	// NewOrderCmd.RegisterFlagCompletionFunc("party-role-qualifier", complete.OrderPartyRoleQualifier)
}


func Execute(cmd *cobra.Command, args []string) error {
	options := config.GetOptions()
	logger := config.GetLogger()

	context, err := config.GetCurrentContext()
	if err != nil {
		return err
	}

	sessions, err := context.GetSessions()
	if err != nil {
		return err
	}

	//
	session := sessions[0]
	initiatior, err := context.GetInitiator()
	if err != nil {
		return err
	}

	transportDict, appDict, err := session.GetFIXDictionaries()
	if err != nil {
		return err
	}

	settings, err := context.ToQuickFixInitiatorSettings()
	if err != nil {
		return err
	}

	app := application.NewTradingSessionStatusRequest()
	app.Logger = logger
	app.Settings = settings
	app.TransportDataDictionary = transportDict
	app.AppDataDictionary = appDict

	var quickfixLogger *zerolog.Logger
	if options.QuickFixLogging {
		quickfixLogger = logger
	}

	init, err := initiator.Initiate(app, settings, quickfixLogger)
	if err != nil {
		return err
	}

	// Start session
	err = init.Start()
	if err != nil {
		return err
	}

	defer init.Stop()

	// Choose right timeout cli option > config > default value (5s)
	var timeout time.Duration
	if options.Timeout != time.Duration(0) {
		timeout = options.Timeout
	} else if initiatior.SocketTimeout != time.Duration(0) {
		timeout = initiatior.SocketTimeout
	} else {
		timeout = 5 * time.Second
	}

	// Wait for session connection
	select {
	case <-time.After(timeout):
		return errors.ConnectionTimeout
	case _, ok := <-app.Connected:
		if !ok {
			return errors.FixLogout
		}
	}

	// Prepare Trading Session Status Request
	tssr, err := buildMessage(*session)
	if err != nil {
		return err
	}

	// Send the trading session status request
	err = quickfix.Send(tssr)
	if err != nil {
		return err
	}else{
		fmt.Println("the message was correctly sent : ", tssr)
		
	}

	// Wait for the order response
	var ok bool
	var responseMessage *quickfix.Message

	select {
	case <-time.After(timeout):
		return errors.ResponseTimeout
	case responseMessage, ok = <-app.FromAdminChan:
		if !ok {
			return errors.FixLogout
		}
	case responseMessage, ok = <-app.FromAppChan:
		if !ok {
			return errors.FixLogout
		}
	}

	// Extract fields from the response
	msgType := field.MsgTypeField{}
	ordStatus := field.OrdStatusField{}
	text := field.TextField{}
	responseMessage.Header.GetField(tag.MsgType, &msgType)
	responseMessage.Body.GetField(tag.OrdStatus, &ordStatus)
	responseMessage.Body.GetField(tag.Text, &text)

	if msgType.Value() == enum.MsgType_REJECT {
		return fmt.Errorf("%w: %s", errors.Fix, text.String())
	}
	return err
}

func buildMessage(session config.Session) (quickfix.Messagable, error) {
	message := tradingsessionstatusrequest.New(
		field.NewTradSesReqID("TRADINGSESSIONSTATUSID"),
		field.NewSubscriptionRequestType(enum.SubscriptionRequestType_SNAPSHOT),
	)
	message.Header.Set(field.NewMsgType(enum.MsgType_TRADING_SESSION_STATUS_REQUEST))

	
	// message.Header.Set(field.NewSenderCompID(sessionID.SenderCompID))
	// message.Header.Set(field.NewTargetCompID(sessionID.TargetCompID))

	utils.QuickFixMessagePartSetString(&message.Header, session.TargetCompID, field.NewTargetCompID)
	utils.QuickFixMessagePartSetString(&message.Header, session.TargetSubID, field.NewTargetSubID)
	utils.QuickFixMessagePartSetString(&message.Header, session.SenderCompID, field.NewSenderCompID)
	utils.QuickFixMessagePartSetString(&message.Header, session.SenderSubID, field.NewSenderSubID)

	// message.Body.Set(field.NewHandlInst(enum.HandlInst_AUTOMATED_EXECUTION_ORDER_PRIVATE_NO_BROKER_INTERVENTION))
	// message.Body.Set(field.NewSymbol(optionOrderSymbol))

	return message, nil
}
